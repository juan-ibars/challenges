// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.mpi-internal.com/juan-ibars/learning-go/internal/domain"

	uuid "github.com/google/uuid"
)

// AdRepository is an autogenerated mock type for the AdRepository type
type AdRepository struct {
	mock.Mock
}

// FindAllAds provides a mock function with given fields:
func (_m *AdRepository) FindAllAds() ([]domain.Ad, error) {
	ret := _m.Called()

	var r0 []domain.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Ad, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Ad); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *AdRepository) FindById(id uuid.UUID) (*domain.Ad, error) {
	ret := _m.Called(id)

	var r0 *domain.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*domain.Ad, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *domain.Ad); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ad
func (_m *AdRepository) Save(ad domain.Ad) error {
	ret := _m.Called(ad)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Ad) error); ok {
		r0 = rf(ad)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAdRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdRepository creates a new instance of AdRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdRepository(t mockConstructorTestingTNewAdRepository) *AdRepository {
	mock := &AdRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
